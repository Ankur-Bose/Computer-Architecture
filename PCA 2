// tristate buffer 
module tristatebuffer(
    input i,
    input cnt,
    output z
    );
    assign z = (cnt&i)|(~cnt&'bz);
endmodule


//Majority 
(K-map)
module majorty(input [2:0]a, output z);
assign z = (a[0]&a[2]|
            a[0]&a[1]|
            a[1]&a[2]);
endmodule

//twos compliment
module twoscompliment(input [3:0]a, output [3:0]out);
assign out = ~a + 1'b1;
endmodule

//Decoder
module decoder(input [2:0]s, output [7:0]d, output f1, output f2, output f3);
assign d[0] = ~(~s[0] & ~s[1] & ~s[2]),
       d[1] = ~(~s[0] & ~s[1] & s[2]),
       d[2] = ~(~s[0] & s[1] & ~s[2]),
       d[3] = ~(~s[0] & s[1] & s[2]),
       d[4] = ~(s[0] & ~s[1] & ~s[2]),
       d[5] = ~(s[0] & ~s[1] & s[2]),
       d[6] = ~(s[0] & s[1] & ~s[2]),
       d[7] = ~(s[0] & s[1] & s[2]);
assign f1 = ~(d[2]&d[4]&d[7]);
assign f2 = ~(d[0]&d[3]); 
assign f3 = ~(d[0]&d[2]&d[3]&d[4]&d[7]);
endmodule


#testbench
module decoder_tb;
reg [2:0]s;
wire [7:0]d;
wire f1;
wire f2;
wire f3;
decoder uut(.s(s), .d(d), .f1(f1), .f2(f2),.f3(f3));
initial begin
s=0;
#100;
s=1;
#100;
s=2;
#100;
s=3;
#100;
s=4;
#100;
s=5;
#100;
s=6;
#100;
s=7;
#100;
end
endmodule
