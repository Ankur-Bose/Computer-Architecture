Tristate
module tristate(
    input i,
    input cnt,
    output z
    );
    assign z=(cnt & i)|(~cnt&'bz);
endmodule


module tristate_tb;
    reg i, cnt; //input
    wire z;
    tristate uut(.i(i), .cnt(cnt), .z(z));
    initial begin
    i=0;
    cnt=0;
    #100;
    i=0;
    cnt=1;
    #100;
    i=1;
    cnt=0;
    #100;
    i=1;
    cnt=1;
    #100;
    end
    initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0,tristate_tb);
    
    end
endmodule

























Compliment
module twocompi(input [3:0]a_i, output [3:0]twos, output [3:0]also_twos_comp);
    assign twos = ~a_i + 1'b1;
    assign also_twos_comp = -a_i;
endmodule


module two_tb;
    reg [3:0]a_i;
    wire [3:0]twocomp;
    wire [3:0]al_twocompi;
    twocompi uut(.a_i(a_i),.twos(twocomp),.also_twos_comp(al_twocompi));
    initial begin
    a_i = 5;
    #100;
        end 
endmodule




















Majority


module majorty(input [4:0]sw, output led);
 assign led = (sw[0] & sw[1] & sw[2]) | // ABC
 (sw[0] & sw[1] & sw[3]) |
 (sw[0] & sw[2] & sw[3]) |
 (sw[1] & sw[2] & sw[3]) |
 (sw[0] & sw[1] & sw[4]) |
 (sw[0] & sw[3] & sw[4]) |
 (sw[0] & sw[2] & sw[4]) |
 (sw[1] & sw[2] & sw[4]) |
 (sw[2] & sw[3] & sw[4]) |
 (sw[1] & sw[3] & sw[4]);
endmodule



module majorty_tb;
 reg [4:0]a;
 wire led;
 majorty uut(.sw(a), .led(led));
 initial begin
 a = 27;
 #100;
 end
endmodule

















Minimisation





